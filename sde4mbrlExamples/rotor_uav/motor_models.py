import jax
import jax.numpy as jnp


def quadratic_fm_model(get_params_fn, u):
    """Compute the thrust and moment generated by the motors.

    Args:
        u (jax.numpy.ndarray): The input of the quadrotor. Thrust, Moment x, Moment y, Moment z

    Returns:
        jax.numpy.ndarray: The thrust generated by the motors.
        jax.numpy.ndarray: The moment generated by the motors.
    """
    # Get the forces and moments
    Fb, Mx, My, Mz = u

    # Compute the thrust as a quadratic function of Fb
    # Get parameters of thrust model. These are second order polynomials coefficients
    a = get_params_fn('aT')
    b = get_params_fn('bT')
    # Compute the thrust
    thrust = a * Fb ** 2 + b * Fb
    # Get parameters for Mx model. These are second order polynomials coefficients
    aMx = get_params_fn('aMx') * thrust + get_params_fn('aMx0')
    bMx = get_params_fn('bMx') * thrust + get_params_fn('bMx0')
    # Compute the moment Mx
    Mx = aMx * Mx ** 2 + bMx * Mx
    # Get parameters for My model. These are second order polynomials coefficients
    aMy = get_params_fn('aMy') * thrust + get_params_fn('aMy0')
    bMy = get_params_fn('bMy') * thrust + get_params_fn('bMy0')
    # Compute the moment My
    My = aMy * My ** 2 + bMy * My
    # Get parameters for Mz model. These are second order polynomials coefficients
    aMz = get_params_fn('aMz') * thrust + get_params_fn('aMz0')
    bMz = get_params_fn('bMz') * thrust + get_params_fn('bMz0')
    # Compute the moment Mz
    Mz = aMz * Mz ** 2 + bMz * Mz
    # Now add a common offset to the moments fron the other moments
    Mx += get_params_fn('cMxy') * My + get_params_fn('cMxz') * Mz
    My += get_params_fn('cMyx') * Mx + get_params_fn('cMyz') * Mz
    Mz += get_params_fn('cMzx') * Mx + get_params_fn('cMzy') * My
    return thrust, jnp.array([Mx, My, Mz])
    
def linear_fm_model(get_params_fn, u):
    """Compute the thrust and moment generated by the motors.

    Args:
        u (jax.numpy.ndarray): The input of the quadrotor. Thrust, Moment x, Moment y, Moment z

    Returns:
        jax.numpy.ndarray: The thrust generated by the motors.
        jax.numpy.ndarray: The moment generated by the motors.
    """
    # Get the forces and moments
    Fb, Mx, My, Mz = u

    # Compute the thrust as a linear function of Fb
    # Get parameters of thrust model. These are second order polynomials coefficients
    a = get_params_fn('aT')
    # Compute the thrust
    thrust = a * Fb
    # Get parameters for Mx model. These are second order polynomials coefficients
    aMx = get_params_fn('aMx') * thrust + get_params_fn('aMx0')
    # Compute the moment Mx
    Mx = aMx * Mx
    # Get parameters for My model. These are second order polynomials coefficients
    aMy = get_params_fn('aMy') * thrust + get_params_fn('aMy0')
    # Compute the moment My
    My = aMy * My
    # Get parameters for Mz model. These are second order polynomials coefficients
    aMz = get_params_fn('aMz') * thrust + get_params_fn('aMz0')
    # Compute the moment Mz
    Mz = aMz * Mz
    # Now add a common offset to the moments fron the other moments
    Mx += get_params_fn('cMxy') * My + get_params_fn('cMxz') * Mz
    My += get_params_fn('cMyx') * Mx + get_params_fn('cMyz') * Mz
    Mz += get_params_fn('cMzx') * Mx + get_params_fn('cMzy') * My
    return thrust, jnp.array([Mx, My, Mz])
    
def cubic_fm_model(get_params_fn, u):
    # Get the forces and moments
    Fb, Mx, My, Mz = u

    # Compute the thrust as a linear function of Fb
    # Get parameters of thrust model. These are second order polynomials coefficients
    a = get_params_fn('aT')
    b = get_params_fn('bT')
    c = get_params_fn('cT')
    # Compute the thrust
    thrust = a * Fb ** 3 + b * Fb ** 2 + c * Fb
    # Get parameters for Mx model. These are second order polynomials coefficients
    aMx = get_params_fn('aMx') * thrust + get_params_fn('aMx0')
    bMx = get_params_fn('bMx') * thrust + get_params_fn('bMx0')
    cMx = get_params_fn('cMx') * thrust + get_params_fn('cMx0')
    # Compute the moment Mx
    Mx = aMx * Mx ** 3 + bMx * Mx ** 2 + cMx * Mx
    # Get parameters for My model. These are second order polynomials coefficients
    aMy = get_params_fn('aMy') * thrust + get_params_fn('aMy0')
    bMy = get_params_fn('bMy') * thrust + get_params_fn('bMy0')
    cMy = get_params_fn('cMy') * thrust + get_params_fn('cMy0')
    # Compute the moment My
    My = aMy * My ** 3 + bMy * My ** 2 + cMy * My
    # Get parameters for Mz model. These are second order polynomials coefficients
    aMz = get_params_fn('aMz') * thrust + get_params_fn('aMz0')
    bMz = get_params_fn('bMz') * thrust + get_params_fn('bMz0')
    cMz = get_params_fn('cMz') * thrust + get_params_fn('cMz0')
    # Compute the moment Mz
    Mz = aMz * Mz ** 3 + bMz * Mz ** 2 + cMz * Mz
    # Now add a common offset to the moments fron the other moments
    Mx += get_params_fn('cMxy') * My + get_params_fn('cMxz') * Mz
    My += get_params_fn('cMyx') * Mx + get_params_fn('cMyz') * Mz
    Mz += get_params_fn('cMzx') * Mx + get_params_fn('cMzy') * My
    return thrust, jnp.array([Mx, My, Mz])